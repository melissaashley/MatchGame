"use strict";

var cards = [{
  id: '1',
  name: 'frog'
}, {
  id: '2',
  name: 'bird'
}, {
  id: '3',
  name: 'fish'
}, {
  id: '4',
  name: 'goose'
}, {
  id: '5',
  name: 'moose'
}, {
  id: '6',
  name: 'parrot'
}, {
  id: '7',
  name: 'lion'
}, {
  id: '8',
  name: 'tiger'
}];
var game = document.getElementById('game');
var gridBoard = cards.concat(cards);
gridBoard.sort(function () {
  return 0.5 - Math.random();
});
var flippedCards = [];
/**
 * emptyCard - resets the flippedCards array
 *
 * @param {Array} flippedCards
 */

var emptyCards = function emptyCards() {
  flippedCards = [];
};
/**
 * cardNotMatched - if the cards do not match
 */


var cardNotMatched = function cardNotMatched() {
  console.log('rude, no match');
  emptyCards();
};
/**
 * cardMatched - if the cards match
 */


var cardMatched = function cardMatched() {
  console.log('it matches');
  emptyCards();
}; // Check if card matches


var checkMatch = function checkMatch(match) {
  flippedCards.push(match.getAttribute('data-type'));
  var cardLength = flippedCards.length;
  var cardCount = 2;
  console.log(flippedCards);

  if (cardCount === cardLength) {
    if (flippedCards[0] === flippedCards[1]) {
      cardMatched();
    } else {
      cardNotMatched();
    }
  }
};
/**
 * flipCard - if card is not already flipped, add class and call checkMatch
 */


var flipCard = function flipCard() {
  var match = this;

  if (!match.classList.contains('flipped')) {
    match.classList.add('flipped');
    checkMatch(match);
  }
};
/**
 * Generate cards
 * 
 * @param {Object} cards
 */


var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = gridBoard[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var eachCard = _step.value;
    var card = document.createElement('div');
    var icon = document.createElement('span');
    card.classList.add('tile');
    icon.classList.add('icon');
    card.dataset.type = eachCard.name;
    icon.innerHTML = eachCard.id;
    card.appendChild(icon);
    game.appendChild(card);
    card.addEventListener('click', flipCard);
  }
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator["return"] != null) {
      _iterator["return"]();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}
//# sourceMappingURL=app.min.js.map
