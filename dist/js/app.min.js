"use strict";

var cards = [{
  id: '1',
  name: 'bomb'
}, {
  id: '2',
  name: 'diamond'
}, {
  id: '3',
  name: 'leaf'
}, {
  id: '4',
  name: 'paper'
}, {
  id: '5',
  name: 'bolt'
}, {
  id: '6',
  name: 'rocket'
}, {
  id: '7',
  name: 'send'
}, {
  id: '8',
  name: 'ghost'
}];
var game = document.getElementById('game');
var resetIt = document.getElementById("reset");
var winner = document.getElementById("winner");
var flippedCards = [];
var gridBoard = cards.concat(cards);
var allFlipped = document.getElementsByClassName("flipped"); //gridBoard.sort(() => 0.5 - Math.random());

/**
 * startGame - start the game
 */

var startGame = function startGame() {
  console.log('the game has started');
  emptyCardsArray();
};
/**
 * resetGame - reset the game
 */


resetIt.addEventListener('click', startGame);
/**
 * emptyCard - resets the flippedCards array
 *
 * @param {Array} flippedCards
 */

var emptyCardsArray = function emptyCardsArray() {
  flippedCards = [];
};
/**
 * flipCard - add selected class when selected
 */


var flipCard = function flipCard() {
  if (!this.classList.contains('flipped')) {
    this.classList.add('selected');
  }
};
/**
 * checkMatch - check if the cards match
 */


var checkMatch = function checkMatch() {
  flippedCards.push(this);

  if (flippedCards.length === 2) {
    if (flippedCards[0].getAttribute('data-type') === flippedCards[1].getAttribute('data-type')) {
      cardsMatch();
    } else {
      cardsDontMatch();
    }
  }
};
/**
 * cardsMatch - the cards match
 */


var cardsMatch = function cardsMatch() {
  flippedCards[0].classList.add('flipped');
  flippedCards[1].classList.add('flipped');
  flippedCards[0].classList.remove('selected');
  flippedCards[1].classList.remove('selected');
  emptyCardsArray();
};
/**
 * cardsDontMatch - the cards do NOT match
 */


var cardsDontMatch = function cardsDontMatch() {
  setTimeout(function () {
    flippedCards[0].classList.remove('selected');
    flippedCards[1].classList.remove('selected');
    removeSelectedAll();
    emptyCardsArray();
  }, 600);
};
/**
 * removeSelectedAll - remove selected from all cards when cards do not match
 * TODO: Handle this better, user should not be able to select more than two cards at a time.
 */


var removeSelectedAll = function removeSelectedAll() {
  var allCards = document.getElementsByClassName('tile');
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = allCards[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var card = _step.value;
      card.classList.remove('selected');
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

var wonGame = function wonGame() {
  if (16 === allFlipped.length) {
    winner.classList.add('won');
  }
};
/**
 * Generate cards
 * 
 * @param {Object} cards
 */


var _iteratorNormalCompletion2 = true;
var _didIteratorError2 = false;
var _iteratorError2 = undefined;

try {
  for (var _iterator2 = gridBoard[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    var eachCard = _step2.value;
    var card = document.createElement('div');
    card.classList.add('tile', eachCard.name);
    card.dataset.type = eachCard.id;
    game.appendChild(card);
    card.addEventListener('click', flipCard);
    card.addEventListener('click', checkMatch);
    card.addEventListener('click', wonGame);
  }
} catch (err) {
  _didIteratorError2 = true;
  _iteratorError2 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
      _iterator2["return"]();
    }
  } finally {
    if (_didIteratorError2) {
      throw _iteratorError2;
    }
  }
}
//# sourceMappingURL=app.min.js.map
